#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤—Å–µ—Ö –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ —Å —Å–∞–π—Ç–∞ Ruby King (–∂–µ—Å—Ç–∫–æ –∑–∞–¥–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫)
"""

import asyncio
import os
import re
import time
from pathlib import Path
from playwright.async_api import async_playwright
from markdownify import markdownify as md

BASE_URL = "https://ruby-king.ru"
SAVE_DIR = Path("useful_materials")

MATERIALS = [
    ("–õ–æ—Ä", "/base/lore"),
    ("–ü–æ–≥–æ–¥–∞ –∏ –ø–æ—Ä–∞ –≥–æ–¥–∞", "/base/weather"),
    ("–ò–≥—Ä–æ–∫ (–ø–µ—Ä—Å–æ–Ω–∞–∂)", "/base/player"),
    ("–ú–æ–±—ã (–º–æ–Ω—Å—Ç—Ä—ã)", "/base/mobs"),
    ("–ë—Ä–æ–Ω—è", "/base/armor"),
    ("–û—Ä—É–∂–∏–µ", "/base/weapons"),
    ("–ö–ª–∞–Ω—ã", "/base/clans"),
    ("–ö–ª–∞–Ω–æ–≤—ã–µ –≤–æ–π–Ω—ã", "/base/clanwar"),
    ("–õ–æ–∫–∞—Ü–∏–∏", "/base/locations"),
    ("–ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –≤–æ –≤—Ä–µ–º—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è", "/base/negative"),
    ("–ü–æ–∑–∏—Ç–∏–≤–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –≤–æ –≤—Ä–µ–º—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è", "/base/positive"),
    ("–ü—Ä–æ—Ñ–µ—Å—Å–∏–∏", "/base/professions"),
    ("–°–æ–±—ã—Ç–∏—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–π (—Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏)", "/base/profession_events"),
    ("–†–∞—Å—Ç–µ–Ω–∏—è", "/base/plants"),
    ("–†—É–¥–∞", "/base/ore"),
    ("–®–∫—É—Ä—ã", "/base/skins"),
    ("–ë–∞–∑–∞ –¥—Ä–æ–ø–∞", "/base/drop"),
    ("–¢–æ—Ä–≥–æ–≤–µ—Ü", "/base/trader"),
    ("–†—ã–Ω–æ–∫", "/base/market"),
    ("–ó–∞–ª —Å–ª–∞–≤—ã", "/base/halloffame"),
]

def sanitize_filename(name):
    if not name:
        return "untitled"
    clean_name = re.sub(r'[<>:"/\\|?*]', '_', name)
    clean_name = re.sub(r'[_\s]+', '_', clean_name).strip('_')
    return clean_name[:50] if clean_name else "untitled"

def extract_content(page):
    try:
        selectors = [
            "main",
            ".content",
            ".article",
            ".post",
            "[role='main']",
            ".main-content",
            ".page-content"
        ]
        for selector in selectors:
            element = page.query_selector(selector)
            if element:
                return element.inner_text()
        body = page.query_selector("body")
        if body:
            return body.inner_text()
        return "–ö–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {e}"

async def fetch_and_save(page, url, filename):
    await page.goto(url)
    # –ü—Ä–æ–±—É–µ–º —Å–Ω–∞—á–∞–ª–∞ .animeFade, –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî fallback –Ω–∞ body
    try:
        await page.wait_for_selector(".animeFade", timeout=10000)
        content = await page.inner_html(".animeFade")
    except Exception:
        content = await page.content()  # fallback: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    md_content = md(content, heading_style="ATX")
    md_content = f"[–û—Ä–∏–≥–∏–Ω–∞–ª]({url})\n\n" + md_content
    with open(SAVE_DIR / filename, "w", encoding="utf-8") as f:
        f.write(md_content)
    print(f"Saved: {filename}")

async def main():
    print("üöÄ –ù–∞—á–∏–Ω–∞—é —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ Ruby King...")
    SAVE_DIR.mkdir(exist_ok=True)
    async with async_playwright() as p:
        browser = await p.chromium.launch(headless=True)
        page = await browser.new_page()
        summary_lines = []
        for i, (title, path) in enumerate(MATERIALS, 1):
            url = BASE_URL + path
            try:
                print(f"\nüì• [{i}/{len(MATERIALS)}] –°–∫–∞—á–∏–≤–∞—é: {title}")
                print(f"   üîó URL: {url}")
                await fetch_and_save(page, url, sanitize_filename(title) + ".md")
                summary_lines.append(f"- [{title}]({sanitize_filename(title) + '.md'})")
                print(f"   ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ {sanitize_filename(title) + '.md'}")
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ {title}: {e}")
                summary_lines.append(f"- ‚ùå {title} (–æ—à–∏–±–∫–∞: {e})")
        print(f"\nüìù –°–æ–∑–¥–∞—é –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤...")
        with open(SAVE_DIR / "README.md", "w", encoding="utf-8") as f:
            f.write("# üìö –û—Å–Ω–æ–≤–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã Ruby King\n\n")
            f.write(f"–í—Å–µ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤: {len(MATERIALS)}\n\n")
            f.write("## üìã –°–ø–∏—Å–æ–∫ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤\n\n")
            f.write("\n".join(summary_lines))
            f.write(f"\n\n---\n\n")
            f.write(f"*–°–∫–∞—á–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏: {time.strftime('%Y-%m-%d %H:%M:%S')}*\n")
        print(f"\nüéâ –ì–æ—Ç–æ–≤–æ! –í—Å–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–ø–∫–µ '{SAVE_DIR}/'")
        print(f"üìÅ –í—Å–µ–≥–æ —Å–∫–∞—á–∞–Ω–æ: {len(MATERIALS)} –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤")
        print(f"üìÑ –û–±—â–∏–π —Å–ø–∏—Å–æ–∫: {SAVE_DIR}/README.md")
        await browser.close()

if __name__ == "__main__":
    asyncio.run(main()) 