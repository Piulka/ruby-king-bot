#!/usr/bin/env python3
"""
Low Damage Handler - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–∏—Ç—É–∞—Ü–∏–∏ —Å –Ω–∏–∑–∫–∏–º —É—Ä–æ–Ω–æ–º
"""

import time
import logging
from typing import Dict, Any, List, Optional
from ..api.client import APIClient
from ..core.player import Player
from ..ui.display import GameDisplay

logger = logging.getLogger(__name__)

class LowDamageHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏—Ç—É–∞—Ü–∏–π —Å –Ω–∏–∑–∫–∏–º —É—Ä–æ–Ω–æ–º"""
    
    def __init__(self, api_client: APIClient, player: Player, display: GameDisplay):
        self.api_client = api_client
        self.player = player
        self.display = display
        self.is_handling_low_damage = False
        
    def handle_low_damage_situation(self, current_target, mob_group, current_time: float, situation_type: str = "low_damage") -> bool:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–∏—Ç—É–∞—Ü–∏—é —Å –Ω–∏–∑–∫–∏–º —É—Ä–æ–Ω–æ–º –∏–ª–∏ –º–∞–ª—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∑–µ–ª–∏–π
        
        Args:
            current_target: –¢–µ–∫—É—â–∞—è —Ü–µ–ª—å
            mob_group: –ì—Ä—É–ø–ø–∞ –º–æ–±–æ–≤
            current_time: –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
            situation_type: –¢–∏–ø —Å–∏—Ç—É–∞—Ü–∏–∏ ("low_damage" –∏–ª–∏ "low_potions")
        
        Returns:
            bool: True –µ—Å–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, False –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å
        """
        if self.is_handling_low_damage:
            return False
            
        self.is_handling_low_damage = True
        
        if situation_type == "low_potions":
            self.display.print_message("üîÑ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑-–∑–∞ –º–∞–ª–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–µ–ª–∏–π...", "warning")
        else:
            self.display.print_message("üîÑ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –Ω–∏–∑–∫–æ–≥–æ —É—Ä–æ–Ω–∞...", "warning")
        
        try:
            self.display.print_message("‚û°Ô∏è –≠—Ç–∞–ø 1: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –±–æ—è (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–æ–±–∏–≤–∞–Ω–∏–µ)", "info")
            # 1. –ù–µ –¥–æ–±–∏–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –º–æ–±–æ–≤, —Å—Ä–∞–∑—É –∏–¥—ë–º –¥–∞–ª—å—à–µ
            # self._finish_remaining_mobs(current_target, mob_group, current_time)  # –£–±–∏—Ä–∞–µ–º –¥–æ–±–∏–≤–∞–Ω–∏–µ
            
            self.display.print_message("‚û°Ô∏è –≠—Ç–∞–ø 2: –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –∫–≤–∞–¥—Ä–∞—Ç G4", "info")
            self._move_to_g4()
            time.sleep(2)  # –ü–∞—É–∑–∞ 2 —Å–µ–∫—É–Ω–¥—ã
            self._force_display_update()  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∏—Å–ø–ª–µ—è
            
            self.display.print_message("‚û°Ô∏è –≠—Ç–∞–ø 3: –°–±—Ä–æ—Å –ª–æ–∫–∞—Ü–∏–∏", "info")
            self._reset_location()
            time.sleep(2)  # –ü–∞—É–∑–∞ 2 —Å–µ–∫—É–Ω–¥—ã
            self._force_display_update()  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∏—Å–ø–ª–µ—è
            
            self.display.print_message("‚û°Ô∏è –≠—Ç–∞–ø 4: –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–æ—Ä–æ–¥", "info")
            self._return_to_city()
            time.sleep(2)  # –ü–∞—É–∑–∞ 2 —Å–µ–∫—É–Ω–¥—ã
            self._force_display_update()  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∏—Å–ø–ª–µ—è
            
            self.display.print_message("‚û°Ô∏è –≠—Ç–∞–ø 5: –ü—Ä–æ–¥–∞–∂–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤", "info")
            self._sell_equipment(self.player)
            time.sleep(2)  # –ü–∞—É–∑–∞ 2 —Å–µ–∫—É–Ω–¥—ã
            self._force_display_update()  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∏—Å–ø–ª–µ—è
            
            self.display.print_message("‚û°Ô∏è –≠—Ç–∞–ø 6: –ü–æ–∫—É–ø–∫–∞ –∑–µ–ª–∏–π", "info")
            self._buy_potions()
            time.sleep(2)  # –ü–∞—É–∑–∞ 2 —Å–µ–∫—É–Ω–¥—ã
            self._force_display_update()  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∏—Å–ø–ª–µ—è
            
            self.display.print_message("‚û°Ô∏è –≠—Ç–∞–ø 7: –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Ñ–∞—Ä–º –∑–æ–Ω—É", "info")
            self._go_to_farm_zone()
            time.sleep(2)  # –ü–∞—É–∑–∞ 2 —Å–µ–∫—É–Ω–¥—ã
            self._force_display_update()  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∏—Å–ø–ª–µ—è
            
            self.display.print_message("‚û°Ô∏è –≠—Ç–∞–ø 8: –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –ª–æ–∫–∞—Ü–∏—é", "info")
            self._go_to_location()
            time.sleep(2)  # –ü–∞—É–∑–∞ 2 —Å–µ–∫—É–Ω–¥—ã
            self._force_display_update()  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∏—Å–ø–ª–µ—è
            
            self.display.print_message("‚û°Ô∏è –≠—Ç–∞–ø 9: –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –∫–≤–∞–¥—Ä–∞—Ç", "info")
            self._go_to_best_square()
            
            if situation_type == "low_potions":
                self.display.print_message("‚úÖ –ü—Ä–æ—Ü–µ–¥—É—Ä–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∑–µ–ª–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –æ–±—ã—á–Ω–æ–º—É —Ñ–∞—Ä–º—É.", "success")
            else:
                self.display.print_message("‚úÖ –ü—Ä–æ—Ü–µ–¥—É—Ä–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –æ–±—ã—á–Ω–æ–º—É —Ñ–∞—Ä–º—É.", "success")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–∏—Ç—É–∞—Ü–∏–∏: {e}")
            self.display.print_message(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ–¥—É—Ä–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {e}", "error")
            return False
        finally:
            self.is_handling_low_damage = False
    
    def _finish_remaining_mobs(self, current_target, mob_group, current_time: float):
        """–î–æ–±–∏–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –º–æ–±–æ–≤"""
        self.display.print_message("‚öîÔ∏è –î–æ–±–∏–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –º–æ–±–æ–≤...", "info")
        
        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–æ–π –¥–æ –ø–æ–±–µ–¥—ã
        while mob_group and not mob_group.is_empty():
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ –∏–≥—Ä–æ–∫–∞
            if self.player.hp < 50 and self.player.can_use_heal_potion(current_time):
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º API –∫–ª–∏–µ–Ω—Ç –Ω–∞–ø—Ä—è–º—É—é –¥–ª—è –ª–µ—á–µ–Ω–∏—è
                try:
                    heal_result = self.api_client.use_healing_potion()
                    self.player.record_heal(current_time)
                    if "user" in heal_result:
                        self.player.update_from_api_response(heal_result)
                    self.display.print_message("‚ù§Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –∑–µ–ª—å–µ –ª–µ—á–µ–Ω–∏—è!", "success")
                except Exception as e:
                    self.display.print_message(f"‚ùå –û—à–∏–±–∫–∞ –ª–µ—á–µ–Ω–∏—è: {e}", "error")
                time.sleep(1.1)
                continue
                
            # –ê—Ç–∞–∫—É–µ–º –º–æ–±–æ–≤
            for mob in mob_group.get_all_mobs():
                if mob.hp > 0:
                    try:
                        attack_result = self.api_client.attack_mob(mob.farm_id)
                        self.player.record_attack(current_time)
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞
                        if "user" in attack_result:
                            self.player.update_from_api_response(attack_result)
                        
                        if isinstance(attack_result, dict):
                            if attack_result.get('status') == 'success':
                                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –º–æ–±–∞
                                if 'mob' in attack_result:
                                    mob.update_from_api_response(attack_result['mob'])
                                
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–±–µ–¥—É
                                if attack_result.get('dataWin'):
                                    self.display.print_message("üéâ –ü–æ–±–µ–¥–∞!", "success")
                                    break
                            elif attack_result.get('status') == 'fail':
                                self.display.print_message(f"‚ùå –ê—Ç–∞–∫–∞ –ø—Ä–æ–≤–∞–ª–µ–Ω–∞: {attack_result.get('message', '')}", "error")
                    except Exception as e:
                        self.display.print_message(f"‚ùå –û—à–∏–±–∫–∞ –∞—Ç–∞–∫–∏: {e}", "error")
                    time.sleep(1.1)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è
            current_time = time.time()
        
        self.display.print_message("‚úÖ –í—Å–µ –º–æ–±—ã –¥–æ–±–∏—Ç—ã!", "success")
    
    def _move_to_g4(self):
        """–ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –∫–≤–∞–¥—Ä–∞—Ç G4"""
        self.display.print_message("üìç –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –∫–≤–∞–¥—Ä–∞—Ç G4...", "info")
        
        try:
            result = self.api_client.change_square("G4")
            
            if result.get("status") == "success":
                self.display.print_message("‚úÖ –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ G4 —É—Å–ø–µ—à–µ–Ω", "success")
            else:
                self.display.print_message(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ G4: {result.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}", "error")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ G4: {e}")
            self.display.print_message(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ G4: {e}", "error")
    
    def _return_to_city(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–æ—Ä–æ–¥"""
        self.display.print_message("üèôÔ∏è –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–æ—Ä–æ–¥...", "info")
        
        try:
            result = self.api_client.change_main_geo("city")
            
            if result.get("status") == "success":
                self.display.print_message("‚úÖ –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–æ—Ä–æ–¥ —É—Å–ø–µ—à–µ–Ω", "success")
                self.display.update_stats(city_visits=1)
            else:
                self.display.print_message(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–æ—Ä–æ–¥: {result.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}", "error")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–æ—Ä–æ–¥: {e}")
            self.display.print_message(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–æ—Ä–æ–¥: {e}", "error")
    
    def _sell_equipment(self, player: Player) -> bool:
        """–ü—Ä–æ–¥–∞—Ç—å –≤—Å–µ –æ—Ä—É–∂–∏–µ, –±—Ä–æ–Ω—é –∏ –±–∏–∂—É—Ç–µ—Ä–∏—é –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è (–Ω–µ –Ω–∞–¥–µ—Ç—ã–µ)"""
        try:
            user_info = self.api_client.get_user_info()
            if not user_info or 'user' not in user_info or 'inventory' not in user_info['user']:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥–º–µ—Ç–∞—Ö")
                return False
            inventory = user_info['user']['inventory']
            logger.info(f"–ü–æ–ª—É—á–µ–Ω –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å: {len(inventory)} –ø—Ä–µ–¥–º–µ—Ç–æ–≤")
            items_to_sell = []
            for item_id, item_data in inventory.items():
                item_type = item_data.get('typeElement', '')
                item_position = item_data.get('position', '')
                # –ü—Ä–æ–¥–∞–µ–º —Ç–æ–ª—å–∫–æ –≤–µ—â–∏ –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è, –Ω–µ –Ω–∞–¥–µ—Ç—ã–µ
                if (item_type in ['weapons', 'armors', 'jewelry'] and 
                    item_position == 'inventory'):
                    unique_id = item_data.get('uniqueId')
                    if unique_id:
                        items_to_sell.append({"id": unique_id, "count": 1})
                        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω –∫ –ø—Ä–æ–¥–∞–∂–µ: {unique_id} ({item_type}) - –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è")
                elif item_type in ['weapons', 'armors', 'jewelry'] and item_position == 'onBody':
                    logger.info(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–∞–¥–µ—Ç—ã–π –ø—Ä–µ–¥–º–µ—Ç: {item_data.get('uniqueId')} ({item_type}) - –Ω–∞–¥–µ—Ç")
            if not items_to_sell:
                logger.info("–ù–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ")
                return True
            logger.info(f"–ü—Ä–æ–¥–∞—ë–º {len(items_to_sell)} –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è: {items_to_sell}")
            sell_result = self.api_client.sell_items(items_to_sell)
            logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–¥–∞–∂–∏: {sell_result}")
            if sell_result and sell_result.get('status') == 'success':
                gold_earned = sell_result.get('goldEarned', 0)
                self.display.update_stats(gold_earned=gold_earned)
                logger.info(f"–ü—Ä–æ–¥–∞–Ω–æ {len(items_to_sell)} –ø—Ä–µ–¥–º–µ—Ç–æ–≤, –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ {gold_earned} –∑–æ–ª–æ—Ç–∞")
                return True
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–¥–∞–∂–∏: {sell_result}")
                return False
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–∞–∂–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤: {e}")
            return False
    
    def _buy_potions(self):
        """–ö—É–ø–∏—Ç—å –∑–µ–ª—å—è –ª–µ—á–µ–Ω–∏—è –∏ –º–∞–Ω—ã –¥–æ –ª–∏–º–∏—Ç–∞ 300"""
        try:
            user_info = self.api_client.get_user_info()
            if not user_info or 'user' not in user_info or 'inventory' not in user_info['user']:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–µ–ª—å—è—Ö")
                return False
            inventory = user_info['user']['inventory']
            logger.info(f"–ü–æ–ª—É—á–µ–Ω –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∑–µ–ª–∏–π: {len(inventory)} –ø—Ä–µ–¥–º–µ—Ç–æ–≤")
            heal_potions = 0
            mana_potions = 0
            for item_id, item_data in inventory.items():
                item_count = item_data.get('count', 0)
                if item_id == 'm_1':
                    heal_potions = item_count
                    logger.info(f"–ù–∞–π–¥–µ–Ω–æ –∑–µ–ª–∏–π –ª–µ—á–µ–Ω–∏—è: {heal_potions}")
                elif item_id == 'm_3':
                    mana_potions = item_count
                    logger.info(f"–ù–∞–π–¥–µ–Ω–æ –∑–µ–ª–∏–π –º–∞–Ω—ã: {mana_potions}")
            potions_bought = 0
            if heal_potions < 300:
                to_buy = 300 - heal_potions
                logger.info(f"–ü–æ–∫—É–ø–∞–µ–º {to_buy} –∑–µ–ª–∏–π –ª–µ—á–µ–Ω–∏—è")
                heal_result = self.api_client.buy_items('m_1', 'resources', to_buy)
                logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∫—É–ø–∫–∏ –∑–µ–ª–∏–π –ª–µ—á–µ–Ω–∏—è: {heal_result}")
                if heal_result and heal_result.get('status') == 'success':
                    potions_bought += to_buy
                    self.display.update_stats(potions_used=to_buy)
                    logger.info(f"–ö—É–ø–ª–µ–Ω–æ {to_buy} –∑–µ–ª–∏–π –ª–µ—á–µ–Ω–∏—è")
                else:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ –∑–µ–ª–∏–π –ª–µ—á–µ–Ω–∏—è: {heal_result}")
            if mana_potions < 300:
                to_buy = 300 - mana_potions
                logger.info(f"–ü–æ–∫—É–ø–∞–µ–º {to_buy} –∑–µ–ª–∏–π –º–∞–Ω—ã")
                mana_result = self.api_client.buy_items('m_3', 'resources', to_buy)
                logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∫—É–ø–∫–∏ –∑–µ–ª–∏–π –º–∞–Ω—ã: {mana_result}")
                if mana_result and mana_result.get('status') == 'success':
                    potions_bought += to_buy
                    self.display.update_stats(potions_used=to_buy)
                    logger.info(f"–ö—É–ø–ª–µ–Ω–æ {to_buy} –∑–µ–ª–∏–π –º–∞–Ω—ã")
                else:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ –∑–µ–ª–∏–π –º–∞–Ω—ã: {mana_result}")
            if potions_bought > 0:
                logger.info(f"–í—Å–µ–≥–æ –∫—É–ø–ª–µ–Ω–æ –∑–µ–ª–∏–π: {potions_bought}")
                return True
            else:
                logger.info("–ó–µ–ª—å—è –Ω–µ –ø–æ–∫—É–ø–∞–ª–∏—Å—å (–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ)")
                return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –∑–µ–ª–∏–π: {e}")
            return False
    
    def _go_to_best_square(self):
        """–ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –∫–≤–∞–¥—Ä–∞—Ç"""
        self.display.print_message("üéØ –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π –∫–≤–∞–¥—Ä–∞—Ç...", "info")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–≤–∞–¥—Ä–∞—Ç–∞—Ö
            user_info = self.api_client.get_user_info()
            squares = user_info.get("squares", [])
            
            if squares:
                best_square = self._find_best_square(squares)
                
                if best_square:
                    self.display.print_message(f"üéØ –ù–∞–π–¥–µ–Ω –ª—É—á—à–∏–π –∫–≤–∞–¥—Ä–∞—Ç: {best_square}", "info")
                    
                    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –ª—É—á—à–∏–π –∫–≤–∞–¥—Ä–∞—Ç
                    result = self.api_client.change_square(best_square)
                    
                    if result.get("status") == "success":
                        self.display.print_message(f"‚úÖ –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –∫–≤–∞–¥—Ä–∞—Ç {best_square} —É—Å–ø–µ—à–µ–Ω", "success")
                    else:
                        self.display.print_message(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ –∫–≤–∞–¥—Ä–∞—Ç {best_square}: {result.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}", "error")
                else:
                    self.display.print_message("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ–¥—Ö–æ–¥—è—â–∏–π –∫–≤–∞–¥—Ä–∞—Ç", "error")
            else:
                self.display.print_message("‚ùå –ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–≤–∞–¥—Ä–∞—Ç–∞—Ö", "error")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ –∫–≤–∞–¥—Ä–∞—Ç: {e}")
            self.display.print_message(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ –∫–≤–∞–¥—Ä–∞—Ç: {e}", "error")
    
    def _find_best_square(self, squares: List[Dict[str, Any]]) -> Optional[str]:
        """–ù–∞—Ö–æ–¥–∏—Ç –ª—É—á—à–∏–π –∫–≤–∞–¥—Ä–∞—Ç –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–≤–Ω—è"""
        player_level = self.player.level
        target_level = player_level - 9  # –ò—â–µ–º –º–æ–±–æ–≤ –Ω–∞ 9 —É—Ä–æ–≤–Ω–µ–π –Ω–∏–∂–µ
        best_square = None
        best_score = float('inf')  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ä–∞–∑–Ω–∏—Ü–∞ –≤ —É—Ä–æ–≤–Ω—è—Ö
        
        logger.info(f"–ò—â–µ–º –∫–≤–∞–¥—Ä–∞—Ç —Å –º–æ–±–∞–º–∏ —É—Ä–æ–≤–Ω—è {target_level} (–∏–≥—Ä–æ–∫ {player_level})")
        
        for square in squares:
            position = square.get("position")
            lvl_mobs = square.get("lvlMobs")
            
            if lvl_mobs and "mobLvl" in lvl_mobs:
                try:
                    mob_level = int(lvl_mobs["mobLvl"])
                    level_diff = abs(mob_level - target_level)
                    
                    # –ï—Å–ª–∏ –º–æ–±—ã –Ω–∞ 9 —É—Ä–æ–≤–Ω–µ–π –Ω–∏–∂–µ –∏–ª–∏ –≤—ã—à–µ - —ç—Ç–æ –∏–¥–µ–∞–ª—å–Ω–æ
                    if mob_level == target_level:
                        logger.info(f"–ù–∞–π–¥–µ–Ω –∏–¥–µ–∞–ª—å–Ω—ã–π –∫–≤–∞–¥—Ä–∞—Ç {position}: –º–æ–±—ã —É—Ä–æ–≤–Ω—è {mob_level}")
                        return position
                    
                    # –ò—â–µ–º –∫–≤–∞–¥—Ä–∞—Ç —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ä–∞–∑–Ω–∏—Ü–µ–π –≤ —É—Ä–æ–≤–Ω—è—Ö
                    if level_diff < best_score:
                        best_score = level_diff
                        best_square = position
                        logger.info(f"–ù–æ–≤—ã–π –ª—É—á—à–∏–π –∫–≤–∞–¥—Ä–∞—Ç {position}: –º–æ–±—ã —É—Ä–æ–≤–Ω—è {mob_level} (—Ä–∞–∑–Ω–∏—Ü–∞ {level_diff})")
                        
                except (ValueError, TypeError) as e:
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å mob_level, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç –∫–≤–∞–¥—Ä–∞—Ç
                    logger.warning(f"–ù–µ —É–¥–∞–µ—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å –º–æ–±–æ–≤ –≤ –∫–≤–∞–¥—Ä–∞—Ç–µ {position}: {e}")
                    continue
        
        if best_square:
            logger.info(f"–í—ã–±—Ä–∞–Ω –ª—É—á—à–∏–π –∫–≤–∞–¥—Ä–∞—Ç {best_square} —Å —Ä–∞–∑–Ω–∏—Ü–µ–π –≤ —É—Ä–æ–≤–Ω—è—Ö {best_score}")
        else:
            logger.warning("–ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ–¥—Ö–æ–¥—è—â–∏–π –∫–≤–∞–¥—Ä–∞—Ç")
            
        return best_square
    
    def _force_display_update(self):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∏—Å–ø–ª–µ—è"""
        try:
            current_time = time.time()
            player_data = self.player.get_stats_summary()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∏—Å–ø–ª–µ–π —Å —Ç–µ–∫—É—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            self.display.update_display(
                current_state="city",  # –í–æ –≤—Ä–µ–º—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–∏—Ç–∞–µ–º —á—Ç–æ –≤ –≥–æ—Ä–æ–¥–µ
                player_data=player_data,
                mob_data=None,
                mob_group_data=None,
                attack_cooldown=0,
                heal_cooldown=0,
                skill_cooldown=0,
                mana_cooldown=0,
                rest_time=None,
                player_name="Piulok",
                last_attack_time=self.player.last_attack_time,
                last_skill_time=self.player.last_skill_time
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.display.update_stats(
                current_gold=self.player.get_gold_count(),
                current_skulls=self.player.get_skulls_count()
            )
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∏—Å–ø–ª–µ—è: {e}")
    
    def _reset_location(self):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ–º –ª–æ–∫–∞—Ü–∏—é –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º –≤ –≥–æ—Ä–æ–¥"""
        self.display.print_message("üîÑ –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ª–æ–∫–∞—Ü–∏—é...", "info")
        
        try:
            result = self.api_client.change_geo("", "", "reset")
            
            if result.get("status") == "success":
                self.display.print_message("‚úÖ –°–±—Ä–æ—Å –ª–æ–∫–∞—Ü–∏–∏ —É—Å–ø–µ—à–µ–Ω", "success")
            else:
                self.display.print_message(f"‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –ª–æ–∫–∞—Ü–∏–∏: {result.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}", "error")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –ª–æ–∫–∞—Ü–∏–∏: {e}")
            self.display.print_message(f"‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –ª–æ–∫–∞—Ü–∏–∏: {e}", "error")
    
    def _go_to_farm_zone(self):
        """–ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Ñ–∞—Ä–º –∑–æ–Ω—É"""
        self.display.print_message("üåæ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Ñ–∞—Ä–º –∑–æ–Ω—É...", "info")
        
        try:
            result = self.api_client.change_main_geo("farm")
            
            if result.get("status") == "success":
                self.display.print_message("‚úÖ –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Ñ–∞—Ä–º –∑–æ–Ω—É —É—Å–ø–µ—à–µ–Ω", "success")
            else:
                self.display.print_message(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ —Ñ–∞—Ä–º –∑–æ–Ω—É: {result.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}", "error")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ —Ñ–∞—Ä–º –∑–æ–Ω—É: {e}")
            self.display.print_message(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ —Ñ–∞—Ä–º –∑–æ–Ω—É: {e}", "error")
    
    def _go_to_location(self):
        """–ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –ª–æ–∫–∞—Ü–∏—é"""
        self.display.print_message("üìç –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –ª–æ–∫–∞—Ü–∏—é...", "info")
        
        try:
            # –í—ã–±–∏—Ä–∞–µ–º –ª–æ–∫–∞—Ü–∏—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
            player_level = self.player.level
            if player_level < 10:
                # –î–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –Ω–∏–∂–µ 10 —É—Ä–æ–≤–Ω—è –∏—Å–ø–æ–ª—å–∑—É–µ–º loco_0
                self.display.print_message(f"üìç –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ loco_0 (—É—Ä–æ–≤–µ–Ω—å {player_level} < 10)...", "info")
                result = self.api_client.change_geo("loco_0", "south")
            else:
                # –î–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π 10+ —É—Ä–æ–≤–Ω—è –∏—Å–ø–æ–ª—å–∑—É–µ–º loco_3
                self.display.print_message(f"üìç –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ loco_3 (—É—Ä–æ–≤–µ–Ω—å {player_level} >= 10)...", "info")
                result = self.api_client.change_geo("loco_3", "south")
            
            if result.get("status") == "success":
                self.display.print_message("‚úÖ –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –ª–æ–∫–∞—Ü–∏—é —É—Å–ø–µ—à–µ–Ω", "success")
            else:
                self.display.print_message(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ –ª–æ–∫–∞—Ü–∏—é: {result.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}", "error")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ –ª–æ–∫–∞—Ü–∏—é: {e}")
            self.display.print_message(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ –ª–æ–∫–∞—Ü–∏—é: {e}", "error") 