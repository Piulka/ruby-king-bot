#!/usr/bin/env python3
"""
Low Damage Handler - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–∏—Ç—É–∞—Ü–∏–∏ —Å –Ω–∏–∑–∫–∏–º —É—Ä–æ–Ω–æ–º
"""

import time
import logging
from typing import Dict, Any, List, Optional
from ..api.client import APIClient
from ..core.player import Player
from ..ui.display import GameDisplay

logger = logging.getLogger(__name__)

class LowDamageHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏—Ç—É–∞—Ü–∏–π —Å –Ω–∏–∑–∫–∏–º —É—Ä–æ–Ω–æ–º"""
    
    def __init__(self, api_client: APIClient, player: Player, display: GameDisplay):
        self.api_client = api_client
        self.player = player
        self.display = display
        self.is_handling_low_damage = False
        
    def handle_low_damage_situation(self, current_target, mob_group, current_time: float) -> bool:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–∏—Ç—É–∞—Ü–∏—é —Å –Ω–∏–∑–∫–∏–º —É—Ä–æ–Ω–æ–º
        
        Returns:
            bool: True –µ—Å–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, False –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å
        """
        if self.is_handling_low_damage:
            return False
            
        self.is_handling_low_damage = True
        self.display.print_message("üîÑ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –Ω–∏–∑–∫–æ–≥–æ —É—Ä–æ–Ω–∞...", "warning")
        
        try:
            # 1. –î–æ–±–∏–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –º–æ–±–æ–≤
            self._finish_remaining_mobs(current_target, mob_group, current_time)
            
            # 2. –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –∫–≤–∞–¥—Ä–∞—Ç G4
            self._move_to_g4()
            
            # 3. –í—ã—Ö–æ–¥–∏–º –≤ –≥–æ—Ä–æ–¥
            self._return_to_city()
            
            # 4. –ü—Ä–æ–¥–∞–µ–º –≤—Å–µ –æ—Ä—É–∂–∏–µ, –±—Ä–æ–Ω—é –∏ —É–∫—Ä–∞—à–µ–Ω–∏—è
            self._sell_equipment()
            
            # 5. –ü–æ–∫—É–ø–∞–µ–º –∑–µ–ª—å—è –¥–æ 300 –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞
            self._buy_potions()
            
            # 6. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ —Ñ–∞—Ä–º –∏ –∏–¥–µ–º –Ω–∞ –ª—É—á—à–∏–π –∫–≤–∞–¥—Ä–∞—Ç
            self._return_to_farm_and_move_to_best_square()
            
            self.display.print_message("‚úÖ –ü—Ä–æ—Ü–µ–¥—É—Ä–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –æ–±—ã—á–Ω–æ–º—É —Ñ–∞—Ä–º—É.", "success")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–∏–∑–∫–æ–≥–æ —É—Ä–æ–Ω–∞: {e}")
            self.display.print_message(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ–¥—É—Ä–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {e}", "error")
            return False
        finally:
            self.is_handling_low_damage = False
    
    def _finish_remaining_mobs(self, current_target, mob_group, current_time: float):
        """–î–æ–±–∏–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –º–æ–±–æ–≤"""
        self.display.print_message("‚öîÔ∏è –î–æ–±–∏–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –º–æ–±–æ–≤...", "info")
        
        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–æ–π –¥–æ –ø–æ–±–µ–¥—ã
        while mob_group and not mob_group.is_empty():
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ –∏–≥—Ä–æ–∫–∞
            if self.player.hp < 50 and self.player.can_use_heal_potion(current_time):
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º API –∫–ª–∏–µ–Ω—Ç –Ω–∞–ø—Ä—è–º—É—é –¥–ª—è –ª–µ—á–µ–Ω–∏—è
                try:
                    heal_result = self.api_client.use_healing_potion()
                    self.player.record_heal(current_time)
                    if "user" in heal_result:
                        self.player.update_from_api_response(heal_result)
                    self.display.print_message("‚ù§Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –∑–µ–ª—å–µ –ª–µ—á–µ–Ω–∏—è!", "success")
                except Exception as e:
                    self.display.print_message(f"‚ùå –û—à–∏–±–∫–∞ –ª–µ—á–µ–Ω–∏—è: {e}", "error")
                time.sleep(1.1)
                continue
                
            # –ê—Ç–∞–∫—É–µ–º –º–æ–±–æ–≤
            for mob in mob_group.get_all_mobs():
                if mob.hp > 0:
                    try:
                        attack_result = self.api_client.attack_mob(mob.farm_id)
                        self.player.record_attack(current_time)
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞
                        if "user" in attack_result:
                            self.player.update_from_api_response(attack_result)
                        
                        if isinstance(attack_result, dict):
                            if attack_result.get('status') == 'success':
                                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –º–æ–±–∞
                                if 'mob' in attack_result:
                                    mob.update_from_api_response(attack_result['mob'])
                                
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–±–µ–¥—É
                                if attack_result.get('dataWin'):
                                    self.display.print_message("üéâ –ü–æ–±–µ–¥–∞!", "success")
                                    break
                            elif attack_result.get('status') == 'fail':
                                self.display.print_message(f"‚ùå –ê—Ç–∞–∫–∞ –ø—Ä–æ–≤–∞–ª–µ–Ω–∞: {attack_result.get('message', '')}", "error")
                    except Exception as e:
                        self.display.print_message(f"‚ùå –û—à–∏–±–∫–∞ –∞—Ç–∞–∫–∏: {e}", "error")
                    time.sleep(1.1)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è
            current_time = time.time()
        
        self.display.print_message("‚úÖ –í—Å–µ –º–æ–±—ã –¥–æ–±–∏—Ç—ã!", "success")
    
    def _move_to_g4(self):
        """–ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –∫–≤–∞–¥—Ä–∞—Ç G4"""
        self.display.print_message("üìç –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –∫–≤–∞–¥—Ä–∞—Ç G4...", "info")
        
        try:
            result = self.api_client.change_square("G4")
            
            if result.get("status") == "success":
                self.display.print_message("‚úÖ –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ G4 —É—Å–ø–µ—à–µ–Ω", "success")
            else:
                self.display.print_message(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ G4: {result.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}", "error")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ G4: {e}")
            self.display.print_message(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ G4: {e}", "error")
        
        time.sleep(2)
    
    def _return_to_city(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–æ—Ä–æ–¥"""
        self.display.print_message("üèôÔ∏è –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–æ—Ä–æ–¥...", "info")
        
        try:
            result = self.api_client.change_main_geo("city")
            
            if result.get("status") == "success":
                self.display.print_message("‚úÖ –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–æ—Ä–æ–¥ —É—Å–ø–µ—à–µ–Ω", "success")
                self.display.update_stats(city_visits=1)
            else:
                self.display.print_message(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–æ—Ä–æ–¥: {result.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}", "error")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–æ—Ä–æ–¥: {e}")
            self.display.print_message(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–æ—Ä–æ–¥: {e}", "error")
        
        time.sleep(2)
    
    def _sell_equipment(self):
        """–ü—Ä–æ–¥–∞–µ–º –≤—Å–µ –æ—Ä—É–∂–∏–µ, –±—Ä–æ–Ω—é –∏ —É–∫—Ä–∞—à–µ–Ω–∏—è"""
        self.display.print_message("üí∞ –ü—Ä–æ–¥–∞–µ–º –æ—Ä—É–∂–∏–µ, –±—Ä–æ–Ω—é –∏ —É–∫—Ä–∞—à–µ–Ω–∏—è...", "info")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥–º–µ—Ç–∞—Ö
            user_info = self.api_client.get_user_info()
            inventory = user_info.get("inventory", [])
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏
            items_to_sell = []
            for item in inventory:
                item_id = item.get("id", "")
                item_type = item.get("typeElement", "")
                
                # –ü—Ä–æ–¥–∞–µ–º –æ—Ä—É–∂–∏–µ, –±—Ä–æ–Ω—é –∏ —É–∫—Ä–∞—à–µ–Ω–∏—è
                if (item_type in ["weapon", "armor", "jewelry"] or 
                    "weapon" in item_id or "armor" in item_id or "jewelry" in item_id):
                    items_to_sell.append(item_id)
            
            if items_to_sell:
                # –ü—Ä–æ–¥–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã
                result = self.api_client.sell_items(items_to_sell)
                gold_earned = 0
                if result.get("status") == "success":
                    # –°—É–º–º–∏—Ä—É–µ–º –∑–æ–ª–æ—Ç–æ —Å –ø—Ä–æ–¥–∞–∂–∏ (–æ–±—ã—á–Ω–æ id == 'm_0_1')
                    for item in result.get('drop', []):
                        if item.get('id') == 'm_0_1':
                            gold_earned += item.get('count', 0)
                    self.display.print_message(f"‚úÖ –ü—Ä–æ–¥–∞–Ω–æ {len(items_to_sell)} –ø—Ä–µ–¥–º–µ—Ç–æ–≤", "success")
                    self.display.update_stats(items_sold=len(items_to_sell), gold_from_sales=gold_earned)
                else:
                    self.display.print_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–¥–∞–∂–∏: {result.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}", "error")
            else:
                self.display.print_message("‚ÑπÔ∏è –ù–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏", "info")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–¥–∞–∂–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤: {e}")
            self.display.print_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–¥–∞–∂–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤: {e}", "error")
        
        time.sleep(2)
    
    def _buy_potions(self):
        """–ü–æ–∫—É–ø–∞–µ–º –∑–µ–ª—å—è –¥–æ 300 –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞"""
        self.display.print_message("üß™ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –ø–æ–∫—É–ø–∞–µ–º –∑–µ–ª—å—è...", "info")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥–º–µ—Ç–∞—Ö
            user_info = self.api_client.get_user_info()
            inventory = user_info.get("inventory", [])
            
            # –°—á–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∑–µ–ª—å—è
            hp_potions = 0
            mana_potions = 0
            
            for item in inventory:
                item_id = item.get("id", "")
                count = item.get("count", 0)
                
                if item_id == "m_1":  # –ó–µ–ª—å–µ –∑–¥–æ—Ä–æ–≤—å—è
                    hp_potions = count
                elif item_id == "m_3":  # –ó–µ–ª—å–µ –º–∞–Ω—ã
                    mana_potions = count
            
            # –ü–æ–∫—É–ø–∞–µ–º –∑–µ–ª—å—è –∑–¥–æ—Ä–æ–≤—å—è
            if hp_potions < 300:
                hp_to_buy = 300 - hp_potions
                result = self.api_client.buy_items("m_1", hp_to_buy)
                
                if result.get("status") == "success":
                    self.display.print_message(f"‚úÖ –ö—É–ø–ª–µ–Ω–æ {hp_to_buy} –∑–µ–ª–∏–π –∑–¥–æ—Ä–æ–≤—å—è", "success")
                else:
                    self.display.print_message(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ –∑–µ–ª–∏–π –∑–¥–æ—Ä–æ–≤—å—è: {result.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}", "error")
            else:
                self.display.print_message(f"‚ÑπÔ∏è –ó–µ–ª–∏–π –∑–¥–æ—Ä–æ–≤—å—è –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ: {hp_potions}", "info")
            
            # –ü–æ–∫—É–ø–∞–µ–º –∑–µ–ª—å—è –º–∞–Ω—ã
            if mana_potions < 300:
                mana_to_buy = 300 - mana_potions
                result = self.api_client.buy_items("m_3", mana_to_buy)
                
                if result.get("status") == "success":
                    self.display.print_message(f"‚úÖ –ö—É–ø–ª–µ–Ω–æ {mana_to_buy} –∑–µ–ª–∏–π –º–∞–Ω—ã", "success")
                else:
                    self.display.print_message(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ –∑–µ–ª–∏–π –º–∞–Ω—ã: {result.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}", "error")
            else:
                self.display.print_message(f"‚ÑπÔ∏è –ó–µ–ª–∏–π –º–∞–Ω—ã –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ: {mana_potions}", "info")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ –∑–µ–ª–∏–π: {e}")
            self.display.print_message(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ –∑–µ–ª–∏–π: {e}", "error")
        
        time.sleep(2)
    
    def _return_to_farm_and_move_to_best_square(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ —Ñ–∞—Ä–º –∏ –∏–¥–µ–º –Ω–∞ –ª—É—á—à–∏–π –∫–≤–∞–¥—Ä–∞—Ç"""
        self.display.print_message("üåæ –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ —Ñ–∞—Ä–º...", "info")
        
        try:
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Ñ–µ—Ä–º—É
            result = self.api_client.change_main_geo("farm")
            
            if result.get("status") != "success":
                self.display.print_message(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ —Ñ–µ—Ä–º—É: {result.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}", "error")
                return
            
            time.sleep(2)
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –ª–æ–∫–∞—Ü–∏—é loco_3 –Ω–∞ —é–≥
            result = self.api_client.change_geo("loco_3", "south")
            
            if result.get("status") != "success":
                self.display.print_message(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –ª–æ–∫–∞—Ü–∏—é: {result.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}", "error")
                return
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É –∏ –Ω–∞—Ö–æ–¥–∏–º –ª—É—á—à–∏–π –∫–≤–∞–¥—Ä–∞—Ç
            squares = result.get("squares", [])
            best_square = self._find_best_square(squares)
            
            if best_square:
                time.sleep(2)
                
                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –ª—É—á—à–∏–π –∫–≤–∞–¥—Ä–∞—Ç
                result = self.api_client.change_square(best_square)
                
                if result.get("status") == "success":
                    self.display.print_message(f"‚úÖ –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –ª—É—á—à–∏–π –∫–≤–∞–¥—Ä–∞—Ç {best_square} —É—Å–ø–µ—à–µ–Ω", "success")
                else:
                    self.display.print_message(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ –∫–≤–∞–¥—Ä–∞—Ç {best_square}: {result.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}", "error")
            else:
                self.display.print_message("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ–¥—Ö–æ–¥—è—â–∏–π –∫–≤–∞–¥—Ä–∞—Ç", "error")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞ —Ñ–∞—Ä–º: {e}")
            self.display.print_message(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞ —Ñ–∞—Ä–º: {e}", "error")
    
    def _find_best_square(self, squares: List[Dict[str, Any]]) -> Optional[str]:
        """–ù–∞—Ö–æ–¥–∏—Ç –ª—É—á—à–∏–π –∫–≤–∞–¥—Ä–∞—Ç –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–≤–Ω—è"""
        player_level = self.player.level
        best_square = None
        best_score = -1
        
        for square in squares:
            position = square.get("position")
            lvl_mobs = square.get("lvlMobs")
            
            if lvl_mobs and "mobLvl" in lvl_mobs:
                mob_level = lvl_mobs["mobLvl"]
                # –í—ã—á–∏—Å–ª—è–µ–º "–∏–¥–µ–∞–ª—å–Ω–æ—Å—Ç—å" –∫–≤–∞–¥—Ä–∞—Ç–∞ (–±–ª–∏–∑–æ—Å—Ç—å –∫ —É—Ä–æ–≤–Ω—é –∏–≥—Ä–æ–∫–∞)
                score = 100 - abs(mob_level - player_level)
                
                # –ë–æ–Ω—É—Å –∑–∞ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
                if mob_level == player_level:
                    score += 50
                
                # –ë–æ–Ω—É—Å –∑–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ª–æ–∫–∞—Ü–∏–∏
                if "locoName" in lvl_mobs:
                    score += 10
                
                if score > best_score:
                    best_score = score
                    best_square = position
        
        return best_square 