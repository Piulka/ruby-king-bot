#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∫–∞—Ä—Ç–æ–≥—Ä–∞—Ñ–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö –ª–æ–∫–∞—Ü–∏–π, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –∏ –∫–≤–∞–¥—Ä–∞—Ç–æ–≤
–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –≤—Å–µ—Ö –º–æ–±–æ–≤ –Ω–∞ –≤—Å–µ—Ö –∫–≤–∞–¥—Ä–∞—Ç–∞—Ö –≤ —Ñ–∞–π–ª
"""

import json
import time
import logging
from typing import Dict, List, Optional, Tuple
from rich.console import Console
from rich.progress import Progress, SpinnerColumn, TextColumn
from rich.table import Table

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞
from ruby_king_bot.api.client import APIClient
from ruby_king_bot.config.token import GAME_TOKEN
from ruby_king_bot.config.constants import LOCATION_NAMES, DIRECTION_NAMES

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('map_exploration.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

console = Console()

class MapExplorer:
    def __init__(self):
        self.api_client = APIClient()
        self.token = GAME_TOKEN
        
        # –í—Å–µ –ª–æ–∫–∞—Ü–∏–∏ –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        self.locations = [
            "loco_0", "loco_1", "loco_2", "loco_3", "loco_4", 
            "loco_5", "loco_6", "loco_7", "loco_8", "loco_9"
        ]
        self.directions = ["north", "south", "east", "west"]
        
        # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        self.world_map = {}
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            'locations_visited': 0,
            'directions_visited': 0,
            'squares_visited': 0,
            'mobs_found': 0,
            'errors': 0
        }
    
    def explore_world(self):
        """–ü–æ–ª–Ω–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –º–∏—Ä–∞"""
        console.print("[bold blue]üåç –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª–Ω–æ–µ –∫–∞—Ä—Ç–æ–≥—Ä–∞—Ñ–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∏—Ä–∞...[/bold blue]")
        
        with Progress(
            SpinnerColumn(),
            TextColumn("[progress.description]{task.description}"),
            console=console
        ) as progress:
            
            total_locations = len(self.locations)
            total_directions = len(self.directions)
            total_tasks = total_locations * total_directions
            
            main_task = progress.add_task(
                f"–ò—Å—Å–ª–µ–¥—É–µ–º {total_locations} –ª–æ–∫–∞—Ü–∏–π √ó {total_directions} –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π = {total_tasks} –∑–∞–¥–∞—á",
                total=total_tasks
            )
            
            for location in self.locations:
                location_name = LOCATION_NAMES.get(location, location)
                console.print(f"\n[bold green]üìç –ò—Å—Å–ª–µ–¥—É–µ–º –ª–æ–∫–∞—Ü–∏—é: {location_name} ({location})[/bold green]")
                
                self.world_map[location] = {
                    'name': location_name,
                    'directions': {}
                }
                
                for direction in self.directions:
                    direction_name = DIRECTION_NAMES.get(direction, direction)
                    console.print(f"  [yellow]üß≠ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {direction_name} ({direction})[/yellow]")
                    
                    try:
                        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –ª–æ–∫–∞—Ü–∏—é –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
                        change_geo_result = self._move_to_location_and_direction(location, direction)
                        
                        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫–≤–∞–¥—Ä–∞—Ç–∞—Ö
                        squares_data = self._get_squares_data(change_geo_result)
                        
                        if squares_data:
                            self.world_map[location]['directions'][direction] = {
                                'name': direction_name,
                                'squares': self._process_squares_data(squares_data)
                            }
                            
                            self.stats['directions_visited'] += 1
                            self.stats['squares_visited'] += len(squares_data)
                            
                            console.print(f"    [green]‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(squares_data)} –∫–≤–∞–¥—Ä–∞—Ç–æ–≤[/green]")
                        else:
                            self.world_map[location]['directions'][direction] = {
                                'name': direction_name,
                                'squares': {},
                                'error': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∫–≤–∞–¥—Ä–∞—Ç–∞—Ö'
                            }
                            console.print(f"    [red]‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∫–≤–∞–¥—Ä–∞—Ç–∞—Ö[/red]")
                            self.stats['errors'] += 1
                    
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–∏ {location}/{direction}: {e}")
                        self.world_map[location]['directions'][direction] = {
                            'name': direction_name,
                            'squares': {},
                            'error': str(e)
                        }
                        self.stats['errors'] += 1
                        console.print(f"    [red]‚ùå –û—à–∏–±–∫–∞: {e}[/red]")
                    
                    progress.advance(main_task)
                    
                    # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏
                    time.sleep(2)
                
                self.stats['locations_visited'] += 1
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                self._save_map_data()
                
                # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ª–æ–∫–∞—Ü–∏—è–º–∏
                time.sleep(5)
    
    def _move_to_location_and_direction(self, location: str, direction: str) -> dict:
        """–ü–µ—Ä–µ—Ö–æ–¥ –≤ –ª–æ–∫–∞—Ü–∏—é –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç change_geo"""
        result = self.api_client.change_geo(location, direction)
        if result.get("status") != "success":
            raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–π—Ç–∏ –≤ {location}/{direction}: {result.get('message', 'Unknown error')}")
        time.sleep(3)
        return result

    def _get_squares_data(self, change_geo_result: dict) -> Optional[List[Dict]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –∫–≤–∞–¥—Ä–∞—Ç–∞—Ö –∏–∑ –æ—Ç–≤–µ—Ç–∞ change_geo"""
        return change_geo_result.get("squares", [])
    
    def _process_squares_data(self, squares_data: List[Dict]) -> Dict:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –∫–≤–∞–¥—Ä–∞—Ç–∞—Ö"""
        processed_squares = {}
        
        for square_info in squares_data:
            position = square_info.get('position', '')
            lvl_mobs = square_info.get('lvlMobs', {})
            
            if position and lvl_mobs:
                processed_squares[position] = {
                    'mob_level': lvl_mobs.get('mobLvl', 'unknown'),
                    'mob_name': lvl_mobs.get('mobName', 'unknown'),
                    'mob_hp': lvl_mobs.get('mobHp', 0),
                    'mob_max_hp': lvl_mobs.get('mobMaxHp', 0),
                    'raw_data': lvl_mobs
                }
                
                self.stats['mobs_found'] += 1
        
        return processed_squares
    
    def _save_map_data(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç—ã –≤ —Ñ–∞–π–ª"""
        output_file = 'world_map_data.json'
        
        data_to_save = {
            'metadata': {
                'created_at': time.strftime('%Y-%m-%d %H:%M:%S'),
                'total_locations': len(self.locations),
                'total_directions': len(self.directions),
                'stats': self.stats
            },
            'world_map': self.world_map
        }
        
        with open(output_file, 'w', encoding='utf-8') as f:
            json.dump(data_to_save, f, ensure_ascii=False, indent=2)
        
        console.print(f"[green]üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {output_file}[/green]")
    
    def print_summary(self):
        """–í—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        console.print("\n[bold blue]üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ö–ê–†–¢–ò–†–û–í–ê–ù–ò–Ø[/bold blue]")
        
        table = Table(title="–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è")
        table.add_column("–ú–µ—Ç—Ä–∏–∫–∞", style="cyan")
        table.add_column("–ó–Ω–∞—á–µ–Ω–∏–µ", style="magenta")
        
        table.add_row("–õ–æ–∫–∞—Ü–∏–π –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–æ", str(self.stats['locations_visited']))
        table.add_row("–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–æ", str(self.stats['directions_visited']))
        table.add_row("–ö–≤–∞–¥—Ä–∞—Ç–æ–≤ –Ω–∞–π–¥–µ–Ω–æ", str(self.stats['squares_visited']))
        table.add_row("–ú–æ–±–æ–≤ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ", str(self.stats['mobs_found']))
        table.add_row("–û—à–∏–±–æ–∫", str(self.stats['errors']))
        
        console.print(table)
        
        # –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ª–æ–∫–∞—Ü–∏—è–º
        console.print("\n[bold green]üìç –î–ï–¢–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –õ–û–ö–ê–¶–ò–Ø–ú[/bold green]")
        
        for location, location_data in self.world_map.items():
            location_name = location_data['name']
            directions_count = len(location_data['directions'])
            total_squares = sum(len(direction_data.get('squares', {})) 
                              for direction_data in location_data['directions'].values())
            
            console.print(f"  {location_name} ({location}): {directions_count} –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π, {total_squares} –∫–≤–∞–¥—Ä–∞—Ç–æ–≤")
    
    def create_readable_report(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —á–∏—Ç–∞–µ–º–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        report_file = 'world_map_report.md'
        
        with open(report_file, 'w', encoding='utf-8') as f:
            f.write("# üåç –ö–ê–†–¢–ê –ú–ò–†–ê RUBY KING\n\n")
            f.write(f"*–°–æ–∑–¥–∞–Ω–æ: {time.strftime('%Y-%m-%d %H:%M:%S')}*\n\n")
            
            f.write("## üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n")
            f.write(f"- **–õ–æ–∫–∞—Ü–∏–π –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–æ:** {self.stats['locations_visited']}\n")
            f.write(f"- **–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–æ:** {self.stats['directions_visited']}\n")
            f.write(f"- **–ö–≤–∞–¥—Ä–∞—Ç–æ–≤ –Ω–∞–π–¥–µ–Ω–æ:** {self.stats['squares_visited']}\n")
            f.write(f"- **–ú–æ–±–æ–≤ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ:** {self.stats['mobs_found']}\n")
            f.write(f"- **–û—à–∏–±–æ–∫:** {self.stats['errors']}\n\n")
            
            f.write("## üó∫Ô∏è –î–µ—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞\n\n")
            
            for location, location_data in self.world_map.items():
                location_name = location_data['name']
                f.write(f"### üìç {location_name} ({location})\n\n")
                
                for direction, direction_data in location_data['directions'].items():
                    direction_name = direction_data['name']
                    squares = direction_data.get('squares', {})
                    
                    f.write(f"#### üß≠ {direction_name} ({direction})\n\n")
                    
                    if squares:
                        f.write("| –ö–≤–∞–¥—Ä–∞—Ç | –ú–æ–± | –£—Ä–æ–≤–µ–Ω—å | HP | –ú–∞–∫—Å HP |\n")
                        f.write("|---------|-----|---------|----|---------|\n")
                        
                        for square, square_data in squares.items():
                            mob_name = square_data.get('mob_name', 'unknown')
                            mob_level = square_data.get('mob_level', 'unknown')
                            mob_hp = square_data.get('mob_hp', 0)
                            mob_max_hp = square_data.get('mob_max_hp', 0)
                            
                            f.write(f"| {square} | {mob_name} | {mob_level} | {mob_hp} | {mob_max_hp} |\n")
                    else:
                        error = direction_data.get('error', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')
                        f.write(f"*{error}*\n")
                    
                    f.write("\n")
                
                f.write("---\n\n")
        
        console.print(f"[green]üìÑ –ß–∏—Ç–∞–µ–º—ã–π –æ—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: {report_file}[/green]")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    console.print("[bold red]‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –∏—Å—Å–ª–µ–¥—É–µ—Ç –í–°–ï –ª–æ–∫–∞—Ü–∏–∏ –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è![/bold red]")
    console.print("[yellow]–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –∏ —Å–æ–∑–¥–∞—Ç—å –º–Ω–æ–≥–æ API –∑–∞–ø—Ä–æ—Å–æ–≤.[/yellow]")
    
    response = input("\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/N): ").strip().lower()
    if response != 'y':
        console.print("[red]–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.[/red]")
        return
    
    try:
        explorer = MapExplorer()
        explorer.explore_world()
        explorer.print_summary()
        explorer.create_readable_report()
        
        console.print("\n[bold green]üéâ –ö–∞—Ä—Ç–æ–≥—Ä–∞—Ñ–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ![/bold green]")
        console.print("[green]–§–∞–π–ª—ã —Å–æ–∑–¥–∞–Ω—ã:[/green]")
        console.print("  - world_map_data.json (—Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)")
        console.print("  - world_map_report.md (—á–∏—Ç–∞–µ–º—ã–π –æ—Ç—á–µ—Ç)")
        console.print("  - map_exploration.log (–ª–æ–≥–∏)")
        
    except KeyboardInterrupt:
        console.print("\n[yellow]–û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.[/yellow]")
    except Exception as e:
        console.print(f"\n[red]–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}[/red]")
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")


if __name__ == "__main__":
    main() 