#!/usr/bin/env python3
"""
–¢–µ—Å—Ç: –ø–µ—Ä–µ—Ö–æ–¥ –≤ —Ñ–µ—Ä–º—É -> –æ–≥–Ω–µ–Ω–Ω—ã–π –∫—Ä–∞—Ç–µ—Ä -> –ª—É—á—à–∏–π –∫–≤–∞–¥—Ä–∞—Ç -> –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ
"""

import requests
import json
import time

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
GAME_TOKEN = "1750764015078_145327_6700_95b44b31447fdc4c593251e276531049ed0c51d9f73ae0c50bec"
base_url = "https://ruby-king.ru/api"
player_level = 14  # –£—Ä–æ–≤–µ–Ω—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞

# –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∏–∑ curl –∑–∞–ø—Ä–æ—Å–∞
headers = {
    'Accept': 'application/json, text/plain, */*',
    'Accept-Language': 'ru,en;q=0.9,en-US;q=0.8,de;q=0.7',
    'Connection': 'keep-alive',
    'Content-Type': 'application/json',
    'Origin': 'https://ruby-king.ru',
    'Referer': f'https://ruby-king.ru/city?name={GAME_TOKEN}',
    'Sec-Fetch-Dest': 'empty',
    'Sec-Fetch-Mode': 'cors',
    'Sec-Fetch-Site': 'same-origin',
    'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36',
    'sec-ch-ua': '"Google Chrome";v="137", "Chromium";v="137", "Not/A)Brand";v="24"',
    'sec-ch-ua-mobile': '?0',
    'sec-ch-ua-platform': '"macOS"'
}

print("üß™ –¢–µ—Å—Ç: –ø–µ—Ä–µ—Ö–æ–¥ –≤ —Ñ–µ—Ä–º—É -> –æ–≥–Ω–µ–Ω–Ω—ã–π –∫—Ä–∞—Ç–µ—Ä -> –ª—É—á—à–∏–π –∫–≤–∞–¥—Ä–∞—Ç -> –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ")
print("=" * 70)
print(f"üîë –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–∫–µ–Ω: {GAME_TOKEN[:20]}...")
print(f"üë§ –£—Ä–æ–≤–µ–Ω—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: {player_level}")

# –®–∞–≥ 1: –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Ñ–µ—Ä–º—É
print(f"\nüåæ –®–∞–≥ 1: –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Ñ–µ—Ä–º—É")
try:
    start_time = time.time()
    data = {"position": "farm"}
    response = requests.post(
        f"{base_url}/farm/change-main-geo?name={GAME_TOKEN}",
        headers=headers,
        json=data,
        timeout=10
    )
    end_time = time.time()
    request_time = end_time - start_time
    print(f"‚è±Ô∏è  –í—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞: {request_time:.3f} —Å–µ–∫")
    print(f"üì° –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
    if response.status_code == 200:
        try:
            response_data = response.json()
            print(f"üìã –û—Ç–≤–µ—Ç: {json.dumps(response_data, indent=2, ensure_ascii=False)}")
            
            if "status" in response_data:
                if response_data["status"] == "success":
                    print(f"‚úÖ –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Ñ–µ—Ä–º—É —É—Å–ø–µ—à–µ–Ω")
                else:
                    print(f"‚ùå –ü–µ—Ä–µ—Ö–æ–¥ –Ω–µ —É–¥–∞–ª—Å—è: {response_data.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
            else:
                print(f"‚ö†Ô∏è  –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞")
                
        except json.JSONDecodeError:
            print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON –æ—Ç–≤–µ—Ç")
            print(f"üìÑ –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞: {response.text}")
    else:
        print(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
        print(f"üìÑ –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞: {response.text}")
except requests.exceptions.Timeout:
    print(f"‚è∞ –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ (>10 —Å–µ–∫)")
except requests.exceptions.RequestException as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")

# –ü–∞—É–∑–∞ 5 —Å–µ–∫—É–Ω–¥
print(f"\n‚è≥ –ü–∞—É–∑–∞ 5 —Å–µ–∫—É–Ω–¥...")
time.sleep(5)

# –®–∞–≥ 2: –ü–µ—Ä–µ—Ö–æ–¥ –≤ –ª–æ–∫–∞—Ü–∏—é –æ–≥–Ω–µ–Ω–Ω—ã–π –∫—Ä–∞—Ç–µ—Ä –Ω–∞ —é–≥
print(f"\nüî• –®–∞–≥ 2: –ü–µ—Ä–µ—Ö–æ–¥ –≤ –ª–æ–∫–∞—Ü–∏—é –æ–≥–Ω–µ–Ω–Ω—ã–π –∫—Ä–∞—Ç–µ—Ä –Ω–∞ —é–≥")
try:
    start_time = time.time()
    data = {"loco": "loco_3", "direction": "south", "typeAction": "change"}
    response = requests.post(
        f"{base_url}/farm/change-geo?name={GAME_TOKEN}",
        headers=headers,
        json=data,
        timeout=10
    )
    end_time = time.time()
    request_time = end_time - start_time
    print(f"‚è±Ô∏è  –í—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞: {request_time:.3f} —Å–µ–∫")
    print(f"üì° –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
    if response.status_code == 200:
        try:
            response_data = response.json()
            print(f"üìã –û—Ç–≤–µ—Ç: {json.dumps(response_data, indent=2, ensure_ascii=False)}")
            
            if "status" in response_data:
                if response_data["status"] == "success":
                    print(f"‚úÖ –ü–µ—Ä–µ—Ö–æ–¥ –≤ –ª–æ–∫–∞—Ü–∏—é —É—Å–ø–µ—à–µ–Ω")
                    
                    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É –∏ –Ω–∞—Ö–æ–¥–∏–º –ª—É—á—à–∏–π –∫–≤–∞–¥—Ä–∞—Ç
                    if "squares" in response_data:
                        squares = response_data["squares"]
                        best_square = None
                        best_score = -1
                        
                        print(f"\nüîç –ê–Ω–∞–ª–∏–∑ –∫–∞—Ä—Ç—ã –¥–ª—è —É—Ä–æ–≤–Ω—è {player_level}:")
                        for square in squares:
                            position = square.get("position")
                            lvl_mobs = square.get("lvlMobs")
                            
                            if lvl_mobs and "mobLvl" in lvl_mobs:
                                mob_level = lvl_mobs["mobLvl"]
                                # –í—ã—á–∏—Å–ª—è–µ–º "–∏–¥–µ–∞–ª—å–Ω–æ—Å—Ç—å" –∫–≤–∞–¥—Ä–∞—Ç–∞ (–±–ª–∏–∑–æ—Å—Ç—å –∫ —É—Ä–æ–≤–Ω—é –∏–≥—Ä–æ–∫–∞)
                                score = 100 - abs(mob_level - player_level)
                                
                                # –ë–æ–Ω—É—Å –∑–∞ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
                                if mob_level == player_level:
                                    score += 50
                                
                                # –ë–æ–Ω—É—Å –∑–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ª–æ–∫–∞—Ü–∏–∏
                                if "locoName" in lvl_mobs:
                                    score += 10
                                    print(f"  {position}: –º–æ–±—ã —É—Ä–æ–≤–Ω—è {mob_level} ({lvl_mobs['locoName']}) - –æ—Ü–µ–Ω–∫–∞: {score}")
                                else:
                                    print(f"  {position}: –º–æ–±—ã —É—Ä–æ–≤–Ω—è {mob_level} - –æ—Ü–µ–Ω–∫–∞: {score}")
                                
                                if score > best_score:
                                    best_score = score
                                    best_square = position
                            else:
                                print(f"  {position}: –Ω–µ—Ç –º–æ–±–æ–≤")
                        
                        if best_square:
                            print(f"\nüéØ –õ—É—á—à–∏–π –∫–≤–∞–¥—Ä–∞—Ç: {best_square} (–æ—Ü–µ–Ω–∫–∞: {best_score})")
                            
                            # –ü–∞—É–∑–∞ 5 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º –Ω–∞ –ª—É—á—à–∏–π –∫–≤–∞–¥—Ä–∞—Ç
                            print(f"\n‚è≥ –ü–∞—É–∑–∞ 5 —Å–µ–∫—É–Ω–¥...")
                            time.sleep(5)
                            
                            # –®–∞–≥ 3: –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –ª—É—á—à–∏–π –∫–≤–∞–¥—Ä–∞—Ç
                            print(f"\nüéØ –®–∞–≥ 3: –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –∫–≤–∞–¥—Ä–∞—Ç {best_square}")
                            data_square = {"square": best_square}
                            try:
                                start_time = time.time()
                                response = requests.post(
                                    f"{base_url}/farm/change-square?name={GAME_TOKEN}",
                                    headers=headers,
                                    json=data_square,
                                    timeout=10
                                )
                                end_time = time.time()
                                request_time = end_time - start_time
                                print(f"‚è±Ô∏è  –í—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞: {request_time:.3f} —Å–µ–∫")
                                print(f"üì° –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
                                if response.status_code == 200:
                                    try:
                                        response_data = response.json()
                                        print(f"üìã –û—Ç–≤–µ—Ç: {json.dumps(response_data, indent=2, ensure_ascii=False)}")
                                        
                                        if "status" in response_data:
                                            if response_data["status"] == "success":
                                                print(f"‚úÖ –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ {best_square} —É—Å–ø–µ—à–µ–Ω")
                                                
                                                # –ü–∞—É–∑–∞ 2 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ–º
                                                print(f"\n‚è≥ –ü–∞—É–∑–∞ 2 —Å–µ–∫—É–Ω–¥—ã...")
                                                time.sleep(2)
                                                
                                                # –®–∞–≥ 4: –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏
                                                print(f"\nüîç –®–∞–≥ 4: –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏")
                                                
                                                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
                                                explore_loco = ""
                                                explore_direction = ""
                                                
                                                # –ï—Å–ª–∏ –º—ã –≤ –ø–æ–¥–ª–æ–∫–∞—Ü–∏–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë ID
                                                if "innerLoco" in response_data and response_data["innerLoco"]:
                                                    explore_loco = response_data["innerLoco"]
                                                    explore_direction = "south"
                                                    print(f"üìç –ò—Å—Å–ª–µ–¥—É–µ–º –ø–æ–¥–ª–æ–∫–∞—Ü–∏—é: {explore_loco}")
                                                else:
                                                    # –î–ª—è –æ–±—ã—á–Ω–æ–≥–æ –∫–≤–∞–¥—Ä–∞—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –ª–æ–∫–∞—Ü–∏—é
                                                    explore_loco = "loco_3"
                                                    explore_direction = "south"
                                                    print(f"üìç –ò—Å—Å–ª–µ–¥—É–µ–º –æ–±—ã—á–Ω—ã–π –∫–≤–∞–¥—Ä–∞—Ç –≤ –ª–æ–∫–∞—Ü–∏–∏ {explore_loco}")
                                                
                                                try:
                                                    start_time = time.time()
                                                    data_explore = {
                                                        "loco": explore_loco,
                                                        "direction": explore_direction
                                                    }
                                                    response = requests.post(
                                                        f"{base_url}/farm/farm-mob-one?name={GAME_TOKEN}",
                                                        headers=headers,
                                                        json=data_explore,
                                                        timeout=10
                                                    )
                                                    end_time = time.time()
                                                    request_time = end_time - start_time
                                                    print(f"‚è±Ô∏è  –í—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞: {request_time:.3f} —Å–µ–∫")
                                                    print(f"üì° –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
                                                    if response.status_code == 200:
                                                        try:
                                                            response_data = response.json()
                                                            print(f"üìã –û—Ç–≤–µ—Ç: {json.dumps(response_data, indent=2, ensure_ascii=False)}")
                                                            
                                                            if "status" in response_data:
                                                                if response_data["status"] == "success":
                                                                    print(f"‚úÖ –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
                                                                    if "mob" in response_data:
                                                                        print(f"üéØ –ù–∞–π–¥–µ–Ω –º–æ–±!")
                                                                    elif "message" in response_data:
                                                                        print(f"üìù –°–æ–æ–±—â–µ–Ω–∏–µ: {response_data['message']}")
                                                                else:
                                                                    print(f"‚ùå –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å: {response_data.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                                                            else:
                                                                print(f"‚ö†Ô∏è  –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞")
                                                                
                                                        except json.JSONDecodeError:
                                                            print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON –æ—Ç–≤–µ—Ç")
                                                            print(f"üìÑ –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞: {response.text}")
                                                    else:
                                                        print(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
                                                        print(f"üìÑ –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞: {response.text}")
                                                except requests.exceptions.Timeout:
                                                    print(f"‚è∞ –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ (>10 —Å–µ–∫)")
                                                except requests.exceptions.RequestException as e:
                                                    print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
                                                
                                            else:
                                                print(f"‚ùå –ü–µ—Ä–µ—Ö–æ–¥ –Ω–µ —É–¥–∞–ª—Å—è: {response_data.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                                        else:
                                            print(f"‚ö†Ô∏è  –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞")
                                            
                                    except json.JSONDecodeError:
                                        print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON –æ—Ç–≤–µ—Ç")
                                        print(f"üìÑ –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞: {response.text}")
                                else:
                                    print(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
                                    print(f"üìÑ –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞: {response.text}")
                            except requests.exceptions.Timeout:
                                print(f"‚è∞ –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ (>10 —Å–µ–∫)")
                            except requests.exceptions.RequestException as e:
                                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
                        else:
                            print(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ–¥—Ö–æ–¥—è—â–∏–π –∫–≤–∞–¥—Ä–∞—Ç")
                else:
                    print(f"‚ùå –ü–µ—Ä–µ—Ö–æ–¥ –Ω–µ —É–¥–∞–ª—Å—è: {response_data.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
            else:
                print(f"‚ö†Ô∏è  –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞")
                
        except json.JSONDecodeError:
            print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON –æ—Ç–≤–µ—Ç")
            print(f"üìÑ –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞: {response.text}")
    else:
        print(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
        print(f"üìÑ –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞: {response.text}")
except requests.exceptions.Timeout:
    print(f"‚è∞ –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ (>10 —Å–µ–∫)")
except requests.exceptions.RequestException as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")

print("\nüèÅ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω") 